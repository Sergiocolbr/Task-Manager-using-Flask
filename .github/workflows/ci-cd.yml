name: Full pipeline4

on:
  push:
    branches: [ "main", "staging", "development" ]
  pull_request:
    branches: [ "main", "staging", "development" ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 bandit
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  test:
    runs-on: ubuntu-24.04
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Test with pytest
        run: |
          pytest

  bandit:
    runs-on: ubuntu-24.04
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit
      - name: Run Bandit
        run: |
          bandit -r . -f json -o bandit_report.json || true  # Permite que o job continue mesmo se Bandit falhar
      - name: Upload Bandit Report
        uses: actions/upload-artifact@v3
        with:
          name: bandit-report
          path: bandit_report.json

  dependency-check:
    runs-on: ubuntu-24.04
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Install Dependency Check
        run: |
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v10.0.4/dependency-check-10.0.4-release.zip
          unzip dependency-check-10.0.4-release.zip
          sudo mv dependency-check /usr/local/bin/
          sudo chmod +x /usr/local/bin/dependency-check/bin/dependency-check.sh
      - name: Run Dependency Check
        run: |
          /usr/local/bin/dependency-check/bin/dependency-check.sh --project "Task-Manager-using-Flask" -o ./dependency-check-report --scan . --exclude "**/*.dll" --exclude "**/*.exe"
      - name: Upload Dependency Check Report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: ./dependency-check-report

  autotag:
    runs-on: ubuntu-24.04
    needs: [build, test]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'  
      - name: Install autotag
        run: |
          npm install -g autotag
      - name: Generate tag
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}  # Usar o token do GitHub
        run: |
          autotag